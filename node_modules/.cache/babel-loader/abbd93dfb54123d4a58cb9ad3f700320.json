{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\"; //initial statee\n\nexport const initialState = {\n  votes: 0,\n  toggle: true\n}; //reducer function accept state and action, and pass it as an arguments\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"increment\") {\n    return {\n      votes: state.votes + 1,\n      toggle: state.toggle\n    };\n  } else if (action.type === \"decrement\") {\n    return {\n      votes: state.votes - 1,\n      toggle: state.toggle\n    };\n  } else if (action.type === \"incrementBy10\") {\n    return {\n      votes: state.votes + action.payload,\n      toggle: state.toggle\n    };\n  } else if (action.type === \"toggle\") {\n    return {\n      votes: state.votes,\n      toggle: !state.toggle\n    };\n  }\n}; // creating a store which except a reducer as an arguments(or pass reducer to store)\n\n\nconst voteStore = configureStore({\n  reducer\n});\nexport default voteStore;","map":{"version":3,"sources":["E:/project/react/react-redux/src/store/votes-store.jsx"],"names":["configureStore","initialState","votes","toggle","reducer","state","action","type","payload","voteStore"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,MAAM,EAAE;AAApB,CAArB,C,CAEP;;AACA,MAAMC,OAAO,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAChD,MAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AAAEL,MAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc,CAAvB;AAA0BC,MAAAA,MAAM,EAAEE,KAAK,CAACF;AAAxC,KAAP;AACD,GAFD,MAEO,IAAIG,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AACtC,WAAO;AAAEL,MAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc,CAAvB;AAA0BC,MAAAA,MAAM,EAAEE,KAAK,CAACF;AAAxC,KAAP;AACD,GAFM,MAEA,IAAIG,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AAC1C,WAAO;AAAEL,MAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACE,OAA9B;AAAuCL,MAAAA,MAAM,EAAEE,KAAK,CAACF;AAArD,KAAP;AACD,GAFM,MAEA,IAAIG,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AACnC,WAAO;AAAEL,MAAAA,KAAK,EAAEG,KAAK,CAACH,KAAf;AAAsBC,MAAAA,MAAM,EAAE,CAACE,KAAK,CAACF;AAArC,KAAP;AACD;AACF,CAVD,C,CAYA;;;AACA,MAAMM,SAAS,GAAGT,cAAc,CAAC;AAAEI,EAAAA;AAAF,CAAD,CAAhC;AAEA,eAAeK,SAAf","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\n//initial statee\r\nexport const initialState = { votes: 0, toggle: true };\r\n\r\n//reducer function accept state and action, and pass it as an arguments\r\nconst reducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n    return { votes: state.votes + 1, toggle: state.toggle };\r\n  } else if (action.type === \"decrement\") {\r\n    return { votes: state.votes - 1, toggle: state.toggle };\r\n  } else if (action.type === \"incrementBy10\") {\r\n    return { votes: state.votes + action.payload, toggle: state.toggle };\r\n  } else if (action.type === \"toggle\") {\r\n    return { votes: state.votes, toggle: !state.toggle };\r\n  }\r\n};\r\n\r\n// creating a store which except a reducer as an arguments(or pass reducer to store)\r\nconst voteStore = configureStore({ reducer });\r\n\r\nexport default voteStore;\r\n"]},"metadata":{},"sourceType":"module"}